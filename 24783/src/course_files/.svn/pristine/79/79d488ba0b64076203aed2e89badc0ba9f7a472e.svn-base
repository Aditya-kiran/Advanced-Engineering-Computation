#ifndef POLYGONALMESH_H_IS_INCLUDED
#define POLYGONALMESH_H_IS_INCLUDED


#include <list>
#include <unordered_map>
#include <ysclass.h>


class PolygonalMesh
{
public:
	enum
	{
		NullSearchKey=0x7fffffff
	};

private:
	unsigned int searchKeySeed;

protected:
	class Vertex
	{
	public:
		unsigned int searchKey;
		YsVec3 pos;
	};
private:
	mutable std::list <Vertex> vtxList;
public:
	class VertexHandle
	{
	friend class PolygonalMesh;
	private:
		std::list <Vertex>::iterator iter;
	public:
		bool operator==(VertexHandle incoming)
		{
			return iter==incoming.iter;
		}
		bool operator!=(VertexHandle incoming)
		{
			return iter!=incoming.iter;
		}
	};

private:
	std::unordered_map <unsigned int,VertexHandle> vtxSearch;

protected:
	class Polygon
	{
	public:
		std::vector <VertexHandle> vtHdAry;
		YsVec3 nom;
		unsigned int searchKey;
	};
private:
	mutable std::list <Polygon> plgList;
public:
	class PolygonHandle
	{
	friend PolygonalMesh;
	private:
		std::list <Polygon>::iterator iter;
	public:
		bool operator==(PolygonHandle incoming)
		{
			return iter==incoming.iter;
		}
		bool operator!=(PolygonHandle incoming)
		{
			return iter!=incoming.iter;
		}
	};

private:
	std::unordered_map <unsigned int,PolygonHandle> plgSearch;
	std::unordered_map <unsigned int,std::vector <PolygonHandle> > vtxToPlg;

public:
	PolygonalMesh();
	~PolygonalMesh();
	void CleanUp(void);

	long long int GetNumVertex(void) const;
	VertexHandle FindFirstVertex(void) const;
	VertexHandle FindNextVertex(VertexHandle vtHd) const;

	VertexHandle AddVertex(const YsVec3 &pos);
	unsigned int GetSearchKey(VertexHandle vtHd) const;
	VertexHandle FindVertex(unsigned int searchKey) const;
	VertexHandle NullVertex(void) const;
	YsVec3 GetVertexPosition(VertexHandle vtHd) const;



	long long int GetNumPolygon(void) const;
	PolygonHandle FindFirstPolygon(void) const;
	PolygonHandle FindNextPolygon(PolygonHandle plHd) const;

	PolygonHandle AddPolygon(long long int nVtx,const VertexHandle vtHdAry[]);
	void SetPolygonNormal(PolygonHandle plHd,const YsVec3 &nom);
	unsigned int GetSearchKey(PolygonHandle plHd) const;
	PolygonHandle FindPolygon(unsigned int searchKey) const;
	PolygonHandle NullPolygon(void) const;

	std::vector <VertexHandle> GetPolygonVertex(PolygonHandle plHd) const;
	YsVec3 GetNormal(PolygonHandle plHd) const;

	std::vector <PolygonHandle> FindPolygonFromVertex(VertexHandle vtHd) const;
};


#endif

